<?php

namespace app\admin\controller;

use app\common\model\Category;

class Product extends Common
{

	protected $db;

	public function _initialize ()
	{
		parent::_initialize(); // TODO: Change the autogenerated stub
		$this->db = new \app\common\model\Product();
	}

	//首页
	public function index ()
	{

		$field = $this->db->getAll(2 );
		$this->assign( 'field' , $field );

		return $this->fetch();
	}

	//添加
	public function store ()
	{
		if ( request()->isPost() ) {

            //处理抓取
            //采集首页地址
            $url=input('post.pro_url');
            //获取页面代码
            $rs=file_get_contents($url);

            $preg_title='/<h1>(.+?)<\/h1>/i';
            $preg_price='/<label id=\"productShopPrice\">(.+?)<\/label>/';
            $preg_img='/<img id=\"midimg\"+.+src=\"(.+?)\"+.+>/';
            $preg_hzid='/product-(.+?).html/';
            //进行正则搜索/<label id=\"productShopPrice\">(.+?)</label>/
            preg_match_all($preg_title,$rs,$title);
            preg_match_all($preg_price,$rs,$price);
            preg_match_all($preg_img,$rs,$img);
            preg_match_all($preg_hzid,$url,$hzid);
            $pro=input('post.');

            $pro['pro_title']=$title[1][0];
            $pro['pro_pricein']=$price[1][0];
            $pro['pro_thumb']=$img[1][0];
            $pro['pro_hzid']=$hzid[1][0];


            //var_dump($pro);
            $res = $this->db->store($pro);



			if ( $res[ 'valid' ] ) {
				//说明执行成功
				$this->success( $res[ 'msg' ] , 'index' );
				exit;
			}
			else {
				//执行失败
				$this->error( $res[ 'msg' ] );
				exit;
			}
		}
		//1.获取分类数据
		$cateData = ( new Category() )->getAll();
		$this->assign( 'cateData' , $cateData );
		//2.获取标签数据
		$tagData = db( 'tag' )->select();
		$this->assign( 'tagData' , $tagData );

		return $this->fetch();
	}

	/**
	 * 编辑
	 */
	public function edit ()
	{
		if ( request()->isPost() ) {
			$res = $this->db->edit( input( 'post.' ) );
			if ( $res[ 'valid' ] ) {
				$this->success( $res[ 'msg' ] , 'index' );
				exit;
			}
			else {
				$this->error( $res[ 'msg' ] );
				exit;
			}
		}
		$pro_id = input( 'param.pro_id' );
		//1.获取分类数据
		$cateData = ( new Category() )->getAll();
		$this->assign( 'cateData' , $cateData );
		//2.获取标签数据
		$tagData = db( 'tag' )->select();
		$this->assign( 'tagData' , $tagData );
		//3.获取旧数据
		$oldData = db( 'products' )->find( $pro_id );
		$this->assign( 'oldData' , $oldData );
		//4.获取当前文章所有标签id
		$tag_ids = db( 'pro_tag' )->where( 'pro_id' , $pro_id )->column( 'tag_id' );
		$this->assign( 'tag_ids' , $tag_ids );

		return $this->fetch();
	}

	/**
	 * 修改排序
	 */
	public function changeSort ()
	{
		if ( request()->isAjax() ) {
			$res = $this->db->changeSort( input( 'post.' ) );
			if ( $res[ 'valid' ] ) {
				$this->success( $res[ 'msg' ] , 'index' );
				exit;
			}
			else {
				$this->error( $res[ 'msg' ] );
				exit;
			}
		}
	}

	/**
	 * 删除到回收站
	 */
	public function delToRecycle ()
	{
		$pro_id = input( 'param.pro_id' );
		//将该数据删除到回收站
		if ( $this->db->save( [ 'is_recycle' => 1 ] , [ 'pro_id' => $pro_id ] ) ) {
			$this->success( '操作成功' , 'index' );
			exit;
		}
		else {
			$this->error( '操作失败' );
			exit;
		}
	}
	/**
	 * 恢复数据
	 */
	public function outToRecycle()
	{
		$pro_id = input( 'param.pro_id' );
		//将该数据删除到回收站
		if ( $this->db->save( [ 'is_recycle' => 2 ] , [ 'pro_id' => $pro_id ] ) ) {
			$this->success( '操作成功' , 'index' );
			exit;
		}
		else {
			$this->error( '操作失败' );
			exit;
		}
	}
	/**
	 * 回收站管理
	 */
	public function recycle()
	{
		$field = $this->db->getAll( 1);
		$this->assign( 'field' , $field );
		return $this->fetch();
	}
	/**
	 * 回收站真正的删除
	 */
	public function del()
	{
		$pro_id = input('get.pro_id');
		$res = $this->db->del($pro_id);
		if($res['valid'])
		{
			$this->success($res['msg'],'index');exit;
		}else{
			$this->error($res['msg']);exit;
		}
	}

}
